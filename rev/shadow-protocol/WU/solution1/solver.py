# solver.py
from pwn import process, context, remote
from ctypes import cdll, c_uint
import time
import string

context.log_level = 'error'   # set to 'debug' if you want verbose logs
CHALLENGE = '../remote/shadow_protocol'  # adjust if needed

# --- Feistel-like cipher from the challenge ---
def shadow_protocol(stardust: int) -> int:
    sbox = [
        0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,
        0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,
        0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,
        0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,
        0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,
        0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,
        0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,
        0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,
        0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,
        0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,
        0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,
        0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,
        0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,
        0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,
        0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,
        0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16
    ]
    L = (stardust >> 32) & 0xFFFFFFFF
    R = stardust & 0xFFFFFFFF
    round_keys = [0xA5A5C3C3, 0x5A5A9696, 0x3C3CA5A5, 0xC3C35A5A]
    for i in range(8):
        F = R
        F = ((sbox[(F >> 24) & 0xFF] << 24) |
             (sbox[(F >> 16) & 0xFF] << 16) |
             (sbox[(F >> 8) & 0xFF] << 8) |
             (sbox[F & 0xFF]))
        F ^= round_keys[i % 4]
        F = ((F << (3 + i)) | (F >> (32 - (3 + i)))) & 0xFFFFFFFF
        F = (F + (L ^ (0x1337BEEF * (i + 1)))) & 0xFFFFFFFF
        L, R = R, (F ^ L) & 0xFFFFFFFF
    out = ((L & 0xFFFFFFFF) << 32) | (R & 0xFFFFFFFF)
    out ^= 0xDEADBEEFCAFEBABE
    out = ((out << 17) | (out >> (64 - 17))) & 0xFFFFFFFFFFFFFFFF
    out = (out + 0x1234567890ABCDEF) & 0xFFFFFFFFFFFFFFFF
    return out

# --- Tree reconstruction exactly like the C code ---
def leaf_val(num: int, i: int) -> int:
    shift = 63 - i * 3
    if shift >= 2:
        return (num >> (shift - 2)) & 0x7
    elif shift == 1:
        return ((num & 0x3) << 1) | 1
    elif shift == 0:
        return ((num & 0x1) << 2) | 0x3
    else:
        return 0x7

def postorder_leaf_order(n_leaves=22):
    order = []
    def rec(lo, hi):
        if lo > hi: return
        if lo == hi:
            order.append(lo); return
        mid = (lo + hi) // 2
        rec(lo, mid)
        rec(mid+1, hi)
        # internal node ignored
    rec(0, n_leaves-1)
    return order

LEAF_ORDER = postorder_leaf_order(22)

def tree_transform(num: int) -> int:
    stardust = 0
    for idx in LEAF_ORDER:
        stardust = (stardust << 3) | (leaf_val(num, idx) & 0x7)
    return stardust

# --- libc rand() replication (matches the challenge) ---
libc = cdll.LoadLibrary('libc.so.6')

def star_key_from_seed(seed: int):
    libc.srand(c_uint(seed))
    upper = libc.rand()
    lower = libc.rand()
    cosmic_seed = (c_uint(upper).value << 32) | c_uint(lower).value
    stardust = tree_transform(cosmic_seed)
    return shadow_protocol(stardust)

def decrypt(cipher: bytes, key: int) -> bytes:
    out = bytearray()
    for i, b in enumerate(cipher):
        kb = (key >> (8 * (i % 8))) & 0xFF
        out.append(b ^ kb)
    return bytes(out)

def plausible_flag(b: bytes) -> bool:
    # quick sanity: printable and likely CTF format
    try:
        s = b.decode('utf-8')
    except UnicodeDecodeError:
        return False
    if not all((c in string.printable) for c in s):
        return False
    return s.startswith("CSAW{") and s.endswith("}")

def main():
    # 1) Run the binary and capture the hex ciphertext
    # p = process(CHALLENGE)
    p = remote('localhost', 21002)
    p.recvuntil(b"Encrypted message:\n")
    ct_hex = p.recvline().strip().decode()
    p.close()

    ciphertext = bytes.fromhex(ct_hex)

    # 2) Build the time-dilated minute seed and try a tiny window for skew
    now = int(time.time())
    dilation = 5 * 365 * 24 * 60 * 60
    base_seed = ((now + dilation) // 60) * 60

    candidates = [base_seed + 60*k for k in (-2, -1, 0, 1, 2)]
    for seed in candidates:
        key = star_key_from_seed(seed)
        pt = decrypt(ciphertext, key)
        if plausible_flag(pt):
            print(pt.decode())
            return

    # If format check is too strict (custom flag format), just print the best guess (seed=base)
    key = star_key_from_seed(base_seed)
    pt = decrypt(ciphertext, key)
    try:
        print(pt.decode())
    except UnicodeDecodeError:
        print(pt.decode(errors='replace'))

if __name__ == "__main__":
    main()
