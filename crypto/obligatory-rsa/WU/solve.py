#!/usr/bin/env python3

from Crypto.Util.number import bytes_to_long, long_to_bytes
from math import gcd

# parameters

n1 = 129092526753383933030272290277107300767707654330551632967994396398045326531320303963182497488182474202461120692162734880438261410066549845639992024037416720228421076282632904598519793243067220342037144864237020757818263128301138206081187472003821789897063195512919097350247829148288118913456964033001399074373
n2 = 108355113470836594630192960651980673780103497896732213011958303033575870030505528169174729530490405910634291415346360688290452976527316909469646908289732023715737439312572012648165819533234604850608390233938174081867146846639110685928136323983961395098632140681799175543046722931901766226759894951292033805879
e = 65537

# encrypt flag
# pt = b"csawctf{wH04m1_70d3Ny_7r4D1710n_4820391578649021735}"
# pt_int = bytes_to_long(pt)
#
# ct1 = pow(pt_int, e, n1)
# ct2 = pow(pt_int, e, n2)
#
# print("\n=== Provided Values ===")
# print(f"n1 = {n1}")
# print(f"n2 = {n2}")
# print(f"e = {e}")
# print()
# print(f"ct1 = {ct1}")
# print(f"ct2 = {ct2}")

ct1 = 88843495989869871001559754882918076779858404440780391818567639602073173623287821751315349650577023725245222074965050035045516207303078461168168819365025746973589245131570143944718203046457391270418459087764266630890566079039821735168805805866019315142070438225092171304343352469029480503113942986147848666077
ct2 = 94565144275929764017241865812435668644218918537941567711225644474418458115544003036362558987818610553975855551983688286593672386482543188020042082319191545660551324293738920214028045344249670512999137548994496577128446165632885775744795722253354007167294035878656056258332703809173397147948143695113558988035

# decrypt the flag
print("\n=== Solver Check ===")
shared_p = gcd(n1, n2)
print(f"shared_p = {shared_p}")
print(f"q1 = {n1 // shared_p}")
print(f"q2 = {n2 // shared_p}")

phi1 = (shared_p - 1) * (n1 // shared_p - 1)
d1 = pow(e, -1, phi1)
m_recovered = pow(ct1, d1, n1)
print("Recovered:", long_to_bytes(m_recovered))
